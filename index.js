import inquirer from 'inquirer';
import chalk from 'chalk';
import figlet from 'figlet';
import { questions } from './questions.js';

let totalScore = 0;
let currentQuestionIndex = 0;

function displayWelcome() {
    console.clear();
    console.log(
        chalk.yellow(
            figlet.textSync('PC Quiz!', { horizontalLayout: 'full' })
        )
    );
    console.log(chalk.blue('\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö!\n'));
}

async function askQuestion(question) {
    const timer = question.time;
    let timeLeft = timer;
    
    console.clear();
    console.log(chalk.yellow(`–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${questions.length}`));
    console.log(chalk.blue(`–û—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.points}`));
    console.log(chalk.green('\n' + question.question + '\n'));

    const timerInterval = setInterval(() => {
        process.stdout.write(`\r–í—Ä–µ–º—è: ${timeLeft} —Å–µ–∫`);
        timeLeft--;

        if (timeLeft < 0) {
            clearInterval(timerInterval);
            console.log(chalk.red('\n\n–í—Ä–µ–º—è –≤—ã—à–ª–æ!'));
            return null;
        }
    }, 1000);

    try {
        const answer = await inquirer.prompt([
            {
                type: 'list',
                name: 'choice',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:',
                choices: question.options,
                pageSize: 4
            }
        ]);

        clearInterval(timerInterval);
        return question.options.indexOf(answer.choice);
    } catch (error) {
        clearInterval(timerInterval);
        return null;
    }
}

async function showResult(userAnswer, question) {
    console.clear();
    if (userAnswer === null) {
        console.log(chalk.red('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—á–∫–∏ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã.'));
    } else if (userAnswer === question.correctAnswer) {
        console.log(chalk.green('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ'));
        totalScore += question.points;
    } else {
        console.log(chalk.red('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! üò¢'));
        console.log(chalk.yellow(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.options[question.correctAnswer]}`));
    }

    console.log(chalk.blue(`\n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${totalScore}`));
    
    if (currentQuestionIndex < questions.length - 1) {
        const { continue: shouldContinue } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'continue',
                message: '–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É?',
                default: true
            }
        ]);

        if (shouldContinue) {
            currentQuestionIndex++;
            await playGame();
        }
    } else {
        await showFinalResults();
    }
}

async function showFinalResults() {
    console.clear();
    console.log(
        chalk.yellow(
            figlet.textSync('Game Over!', { horizontalLayout: 'full' })
        )
    );
    console.log(chalk.green(`\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!`));
    console.log(chalk.blue(`–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: ${totalScore}`));
    console.log(chalk.yellow(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—á–µ—Ç: ${questions.reduce((sum, q) => sum + q.points, 0)}`));

    const { playAgain } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'playAgain',
            message: '–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞?',
            default: false
        }
    ]);

    if (playAgain) {
        totalScore = 0;
        currentQuestionIndex = 0;
        await startGame();
    } else {
        console.log(chalk.green('\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã'));
        process.exit(0);
    }
}

async function playGame() {
    const question = questions[currentQuestionIndex];
    const userAnswer = await askQuestion(question);
    await showResult(userAnswer, question);
}

async function startGame() {
    displayWelcome();
    
    const { ready } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'ready',
            message: '–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?',
            default: true
        }
    ]);

    if (ready) {
        await playGame();
    } else {
        console.log(chalk.yellow('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã'));
        process.exit(0);
    }
}

startGame().catch(console.error); 